(function () {
  'use strict';

  // Generated by LiveScript 1.6.0
  var apply, curry, flip, fix, over, memoize, toString$ = {}.toString;
  apply = curry$(function(f, list){
    return f.apply(null, list);
  });
  curry = function(f){
    return curry$(f);
  };
  flip = curry$(function(f, x, y){
    return f(y, x);
  });
  fix = function(f){
    return function(g){
      return function(){
        return f(g(g)).apply(null, arguments);
      };
    }(function(g){
      return function(){
        return f(g(g)).apply(null, arguments);
      };
    });
  };
  over = curry$(function(f, g, x, y){
    return f(g(x), g(y));
  });
  memoize = function(f){
    var memo;
    memo = {};
    return function(){
      var args, res$, i$, to$, key, arg;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      key = (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
          arg = ref$[i$];
          results$.push(arg + toString$.call(arg).slice(8, -1));
        }
        return results$;
      }()).join('');
      return memo[key] = key in memo
        ? memo[key]
        : f.apply(null, args);
    };
  };
  var Func = {
    curry: curry,
    flip: flip,
    fix: fix,
    apply: apply,
    over: over,
    memoize: memoize
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }

  // Generated by LiveScript 1.6.0
  var each, map, compact, filter, reject, remove, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$$1 = {}.toString;
  each = curry$$1(function(f, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      f(x);
    }
    return xs;
  });
  map = curry$$1(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      results$.push(f(x));
    }
    return results$;
  });
  compact = function(xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (x) {
        results$.push(x);
      }
    }
    return results$;
  };
  filter = curry$$1(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (f(x)) {
        results$.push(x);
      }
    }
    return results$;
  });
  reject = curry$$1(function(f, xs){
    var i$, len$, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (!f(x)) {
        results$.push(x);
      }
    }
    return results$;
  });
  remove = curry$$1(function(el, xs){
    var i, x$;
    i = elemIndex(el, xs);
    x$ = xs.slice();
    if (i != null) {
      x$.splice(i, 1);
    }
    return x$;
  });
  partition = curry$$1(function(f, xs){
    var passed, failed, i$, len$, x;
    passed = [];
    failed = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      (f(x) ? passed : failed).push(x);
    }
    return [passed, failed];
  });
  find = curry$$1(function(f, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (f(x)) {
        return x;
      }
    }
  });
  head = first = function(xs){
    return xs[0];
  };
  tail = function(xs){
    if (!xs.length) {
      return;
    }
    return xs.slice(1);
  };
  last = function(xs){
    return xs[xs.length - 1];
  };
  initial = function(xs){
    if (!xs.length) {
      return;
    }
    return xs.slice(0, -1);
  };
  empty = function(xs){
    return !xs.length;
  };
  reverse = function(xs){
    return xs.concat().reverse();
  };
  unique = function(xs){
    var result, i$, len$, x;
    result = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (!in$(x, result)) {
        result.push(x);
      }
    }
    return result;
  };
  uniqueBy = curry$$1(function(f, xs){
    var seen, i$, len$, x, val, results$ = [];
    seen = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      val = f(x);
      if (in$(val, seen)) {
        continue;
      }
      seen.push(val);
      results$.push(x);
    }
    return results$;
  });
  fold = foldl = curry$$1(function(f, memo, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      memo = f(memo, x);
    }
    return memo;
  });
  fold1 = foldl1 = curry$$1(function(f, xs){
    return fold(f, xs[0], xs.slice(1));
  });
  foldr = curry$$1(function(f, memo, xs){
    var i$, x;
    for (i$ = xs.length - 1; i$ >= 0; --i$) {
      x = xs[i$];
      memo = f(x, memo);
    }
    return memo;
  });
  foldr1 = curry$$1(function(f, xs){
    return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
  });
  unfoldr = curry$$1(function(f, b){
    var result, x, that;
    result = [];
    x = b;
    while ((that = f(x)) != null) {
      result.push(that[0]);
      x = that[1];
    }
    return result;
  });
  concat = function(xss){
    return [].concat.apply([], xss);
  };
  concatMap = curry$$1(function(f, xs){
    var x;
    return [].concat.apply([], (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(f(x));
      }
      return results$;
    }()));
  });
  flatten = function(xs){
    var x;
    return [].concat.apply([], (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (toString$$1.call(x).slice(8, -1) === 'Array') {
          results$.push(flatten(x));
        } else {
          results$.push(x);
        }
      }
      return results$;
    }()));
  };
  difference = function(xs){
    var yss, res$, i$, to$, results, len$, x, j$, len1$, ys;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    yss = res$;
    results = [];
    outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
        ys = yss[j$];
        if (in$(x, ys)) {
          continue outer;
        }
      }
      results.push(x);
    }
    return results;
  };
  intersection = function(xs){
    var yss, res$, i$, to$, results, len$, x, j$, len1$, ys;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    yss = res$;
    results = [];
    outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
        ys = yss[j$];
        if (!in$(x, ys)) {
          continue outer;
        }
      }
      results.push(x);
    }
    return results;
  };
  union = function(){
    var xss, res$, i$, to$, results, len$, xs, j$, len1$, x;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    xss = res$;
    results = [];
    for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
      xs = xss[i$];
      for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
        x = xs[j$];
        if (!in$(x, results)) {
          results.push(x);
        }
      }
    }
    return results;
  };
  countBy = curry$$1(function(f, xs){
    var results, i$, len$, x, key;
    results = {};
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      key = f(x);
      if (key in results) {
        results[key] += 1;
      } else {
        results[key] = 1;
      }
    }
    return results;
  });
  groupBy = curry$$1(function(f, xs){
    var results, i$, len$, x, key;
    results = {};
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      key = f(x);
      if (key in results) {
        results[key].push(x);
      } else {
        results[key] = [x];
      }
    }
    return results;
  });
  andList = function(xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (!x) {
        return false;
      }
    }
    return true;
  };
  orList = function(xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (x) {
        return true;
      }
    }
    return false;
  };
  any = curry$$1(function(f, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (f(x)) {
        return true;
      }
    }
    return false;
  });
  all = curry$$1(function(f, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (!f(x)) {
        return false;
      }
    }
    return true;
  });
  sort = function(xs){
    return xs.concat().sort(function(x, y){
      if (x > y) {
        return 1;
      } else if (x < y) {
        return -1;
      } else {
        return 0;
      }
    });
  };
  sortWith = curry$$1(function(f, xs){
    return xs.concat().sort(f);
  });
  sortBy = curry$$1(function(f, xs){
    return xs.concat().sort(function(x, y){
      if (f(x) > f(y)) {
        return 1;
      } else if (f(x) < f(y)) {
        return -1;
      } else {
        return 0;
      }
    });
  });
  sum = function(xs){
    var result, i$, len$, x;
    result = 0;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      result += x;
    }
    return result;
  };
  product = function(xs){
    var result, i$, len$, x;
    result = 1;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      result *= x;
    }
    return result;
  };
  mean = average = function(xs){
    var sum, i$, len$, x;
    sum = 0;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      sum += x;
    }
    return sum / xs.length;
  };
  maximum = function(xs){
    var max, i$, ref$, len$, x;
    max = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (x > max) {
        max = x;
      }
    }
    return max;
  };
  minimum = function(xs){
    var min, i$, ref$, len$, x;
    min = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (x < min) {
        min = x;
      }
    }
    return min;
  };
  maximumBy = curry$$1(function(f, xs){
    var max, i$, ref$, len$, x;
    max = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (f(x) > f(max)) {
        max = x;
      }
    }
    return max;
  });
  minimumBy = curry$$1(function(f, xs){
    var min, i$, ref$, len$, x;
    min = xs[0];
    for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (f(x) < f(min)) {
        min = x;
      }
    }
    return min;
  });
  scan = scanl = curry$$1(function(f, memo, xs){
    var last, x;
    last = memo;
    return [memo].concat((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(last = f(last, x));
      }
      return results$;
    }()));
  });
  scan1 = scanl1 = curry$$1(function(f, xs){
    if (!xs.length) {
      return;
    }
    return scan(f, xs[0], xs.slice(1));
  });
  scanr = curry$$1(function(f, memo, xs){
    xs = xs.concat().reverse();
    return scan(f, memo, xs).reverse();
  });
  scanr1 = curry$$1(function(f, xs){
    if (!xs.length) {
      return;
    }
    xs = xs.concat().reverse();
    return scan(f, xs[0], xs.slice(1)).reverse();
  });
  slice = curry$$1(function(x, y, xs){
    return xs.slice(x, y);
  });
  take = curry$$1(function(n, xs){
    if (n <= 0) {
      return xs.slice(0, 0);
    } else {
      return xs.slice(0, n);
    }
  });
  drop = curry$$1(function(n, xs){
    if (n <= 0) {
      return xs;
    } else {
      return xs.slice(n);
    }
  });
  splitAt = curry$$1(function(n, xs){
    return [take(n, xs), drop(n, xs)];
  });
  takeWhile = curry$$1(function(p, xs){
    var len, i;
    len = xs.length;
    if (!len) {
      return xs;
    }
    i = 0;
    while (i < len && p(xs[i])) {
      i += 1;
    }
    return xs.slice(0, i);
  });
  dropWhile = curry$$1(function(p, xs){
    var len, i;
    len = xs.length;
    if (!len) {
      return xs;
    }
    i = 0;
    while (i < len && p(xs[i])) {
      i += 1;
    }
    return xs.slice(i);
  });
  span = curry$$1(function(p, xs){
    return [takeWhile(p, xs), dropWhile(p, xs)];
  });
  breakList = curry$$1(function(p, xs){
    return span(compose$(p, not$), xs);
  });
  zip = curry$$1(function(xs, ys){
    var result, len, i$, len$, i, x;
    result = [];
    len = ys.length;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (i === len) {
        break;
      }
      result.push([x, ys[i]]);
    }
    return result;
  });
  zipWith = curry$$1(function(f, xs, ys){
    var result, len, i$, len$, i, x;
    result = [];
    len = ys.length;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (i === len) {
        break;
      }
      result.push(f(x, ys[i]));
    }
    return result;
  });
  zipAll = function(){
    var xss, res$, i$, to$, minLength, len$, xs, ref$, i, lresult$, j$, results$ = [];
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    xss = res$;
    minLength = undefined;
    for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
      xs = xss[i$];
      minLength <= (ref$ = xs.length) || (minLength = ref$);
    }
    for (i$ = 0; i$ < minLength; ++i$) {
      i = i$;
      lresult$ = [];
      for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
        xs = xss[j$];
        lresult$.push(xs[i]);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  zipAllWith = function(f){
    var xss, res$, i$, to$, minLength, len$, xs, ref$, i, results$ = [];
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    xss = res$;
    minLength = undefined;
    for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
      xs = xss[i$];
      minLength <= (ref$ = xs.length) || (minLength = ref$);
    }
    for (i$ = 0; i$ < minLength; ++i$) {
      i = i$;
      results$.push(f.apply(null, (fn$())));
    }
    return results$;
    function fn$(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
        xs = ref$[i$];
        results$.push(xs[i]);
      }
      return results$;
    }
  };
  at = curry$$1(function(n, xs){
    if (n < 0) {
      return xs[xs.length + n];
    } else {
      return xs[n];
    }
  });
  elemIndex = curry$$1(function(el, xs){
    var i$, len$, i, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (x === el) {
        return i;
      }
    }
  });
  elemIndices = curry$$1(function(el, xs){
    var i$, len$, i, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (x === el) {
        results$.push(i);
      }
    }
    return results$;
  });
  findIndex = curry$$1(function(f, xs){
    var i$, len$, i, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (f(x)) {
        return i;
      }
    }
  });
  findIndices = curry$$1(function(f, xs){
    var i$, len$, i, x, results$ = [];
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      i = i$;
      x = xs[i$];
      if (f(x)) {
        results$.push(i);
      }
    }
    return results$;
  });
  var List = {
    each: each,
    map: map,
    filter: filter,
    compact: compact,
    reject: reject,
    remove: remove,
    partition: partition,
    find: find,
    head: head,
    first: first,
    tail: tail,
    last: last,
    initial: initial,
    empty: empty,
    reverse: reverse,
    difference: difference,
    intersection: intersection,
    union: union,
    countBy: countBy,
    groupBy: groupBy,
    fold: fold,
    fold1: fold1,
    foldl: foldl,
    foldl1: foldl1,
    foldr: foldr,
    foldr1: foldr1,
    unfoldr: unfoldr,
    andList: andList,
    orList: orList,
    any: any,
    all: all,
    unique: unique,
    uniqueBy: uniqueBy,
    sort: sort,
    sortWith: sortWith,
    sortBy: sortBy,
    sum: sum,
    product: product,
    mean: mean,
    average: average,
    concat: concat,
    concatMap: concatMap,
    flatten: flatten,
    maximum: maximum,
    minimum: minimum,
    maximumBy: maximumBy,
    minimumBy: minimumBy,
    scan: scan,
    scan1: scan1,
    scanl: scanl,
    scanl1: scanl1,
    scanr: scanr,
    scanr1: scanr1,
    slice: slice,
    take: take,
    drop: drop,
    splitAt: splitAt,
    takeWhile: takeWhile,
    dropWhile: dropWhile,
    span: span,
    breakList: breakList,
    zip: zip,
    zipWith: zipWith,
    zipAll: zipAll,
    zipAllWith: zipAllWith,
    at: at,
    elemIndex: elemIndex,
    elemIndices: elemIndices,
    findIndex: findIndex,
    findIndices: findIndices
  };
  function curry$$1(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function not$(x){ return !x; }

  // Generated by LiveScript 1.6.0
  var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty$1, each$1, map$1, compact$1, filter$1, reject$1, partition$1, find$1;
  values = function(object){
    var i$, x, results$ = [];
    for (i$ in object) {
      x = object[i$];
      results$.push(x);
    }
    return results$;
  };
  keys = function(object){
    var x, results$ = [];
    for (x in object) {
      results$.push(x);
    }
    return results$;
  };
  pairsToObj = function(object){
    var i$, len$, x, resultObj$ = {};
    for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
      x = object[i$];
      resultObj$[x[0]] = x[1];
    }
    return resultObj$;
  };
  objToPairs = function(object){
    var key, value, results$ = [];
    for (key in object) {
      value = object[key];
      results$.push([key, value]);
    }
    return results$;
  };
  listsToObj = curry$$2(function(keys, values){
    var i$, len$, i, key, resultObj$ = {};
    for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
      i = i$;
      key = keys[i$];
      resultObj$[key] = values[i];
    }
    return resultObj$;
  });
  objToLists = function(object){
    var keys, values, key, value;
    keys = [];
    values = [];
    for (key in object) {
      value = object[key];
      keys.push(key);
      values.push(value);
    }
    return [keys, values];
  };
  empty$1 = function(object){
    var x;
    for (x in object) {
      return false;
    }
    return true;
  };
  each$1 = curry$$2(function(f, object){
    var i$, x;
    for (i$ in object) {
      x = object[i$];
      f(x);
    }
    return object;
  });
  map$1 = curry$$2(function(f, object){
    var k, x, resultObj$ = {};
    for (k in object) {
      x = object[k];
      resultObj$[k] = f(x);
    }
    return resultObj$;
  });
  compact$1 = function(object){
    var k, x, resultObj$ = {};
    for (k in object) {
      x = object[k];
      if (x) {
        resultObj$[k] = x;
      }
    }
    return resultObj$;
  };
  filter$1 = curry$$2(function(f, object){
    var k, x, resultObj$ = {};
    for (k in object) {
      x = object[k];
      if (f(x)) {
        resultObj$[k] = x;
      }
    }
    return resultObj$;
  });
  reject$1 = curry$$2(function(f, object){
    var k, x, resultObj$ = {};
    for (k in object) {
      x = object[k];
      if (!f(x)) {
        resultObj$[k] = x;
      }
    }
    return resultObj$;
  });
  partition$1 = curry$$2(function(f, object){
    var passed, failed, k, x;
    passed = {};
    failed = {};
    for (k in object) {
      x = object[k];
      (f(x) ? passed : failed)[k] = x;
    }
    return [passed, failed];
  });
  find$1 = curry$$2(function(f, object){
    var i$, x;
    for (i$ in object) {
      x = object[i$];
      if (f(x)) {
        return x;
      }
    }
  });
  var Obj = {
    values: values,
    keys: keys,
    pairsToObj: pairsToObj,
    objToPairs: objToPairs,
    listsToObj: listsToObj,
    objToLists: objToLists,
    empty: empty$1,
    each: each$1,
    map: map$1,
    filter: filter$1,
    compact: compact$1,
    reject: reject$1,
    partition: partition$1,
    find: find$1
  };
  function curry$$2(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }

  // Generated by LiveScript 1.6.0
  var split, join, lines, unlines, words, unwords, chars, unchars, reverse$1, repeat, capitalize, camelize, dasherize;
  split = curry$$3(function(sep, str){
    return str.split(sep);
  });
  join = curry$$3(function(sep, xs){
    return xs.join(sep);
  });
  lines = function(str){
    if (!str.length) {
      return [];
    }
    return str.split('\n');
  };
  unlines = function(it){
    return it.join('\n');
  };
  words = function(str){
    if (!str.length) {
      return [];
    }
    return str.split(/[ ]+/);
  };
  unwords = function(it){
    return it.join(' ');
  };
  chars = function(it){
    return it.split('');
  };
  unchars = function(it){
    return it.join('');
  };
  reverse$1 = function(str){
    return str.split('').reverse().join('');
  };
  repeat = curry$$3(function(n, str){
    var result, i$;
    result = '';
    for (i$ = 0; i$ < n; ++i$) {
      result += str;
    }
    return result;
  });
  capitalize = function(str){
    return str.charAt(0).toUpperCase() + str.slice(1);
  };
  camelize = function(it){
    return it.replace(/[-_]+(.)?/g, function(arg$, c){
      return (c != null ? c : '').toUpperCase();
    });
  };
  dasherize = function(str){
    return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
      return lower + "-" + (upper.length > 1
        ? upper
        : upper.toLowerCase());
    }).replace(/^([A-Z]+)/, function(arg$, upper){
      if (upper.length > 1) {
        return upper + "-";
      } else {
        return upper.toLowerCase();
      }
    });
  };
  var Str = {
    split: split,
    join: join,
    lines: lines,
    unlines: unlines,
    words: words,
    unwords: unwords,
    chars: chars,
    unchars: unchars,
    reverse: reverse$1,
    repeat: repeat,
    capitalize: capitalize,
    camelize: camelize,
    dasherize: dasherize
  };
  function curry$$3(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }

  // Generated by LiveScript 1.6.0
  var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
  max = curry$$4(function(x$, y$){
    return x$ > y$ ? x$ : y$;
  });
  min = curry$$4(function(x$, y$){
    return x$ < y$ ? x$ : y$;
  });
  negate = function(x){
    return -x;
  };
  abs = Math.abs;
  signum = function(x){
    if (x < 0) {
      return -1;
    } else if (x > 0) {
      return 1;
    } else {
      return 0;
    }
  };
  quot = curry$$4(function(x, y){
    return ~~(x / y);
  });
  rem = curry$$4(function(x$, y$){
    return x$ % y$;
  });
  div = curry$$4(function(x, y){
    return Math.floor(x / y);
  });
  mod = curry$$4(function(x$, y$){
    var ref$;
    return ((x$) % (ref$ = y$) + ref$) % ref$;
  });
  recip = (function(it){
    return 1 / it;
  });
  pi = Math.PI;
  tau = pi * 2;
  exp = Math.exp;
  sqrt = Math.sqrt;
  ln = Math.log;
  pow = curry$$4(function(x$, y$){
    return Math.pow(x$, y$);
  });
  sin = Math.sin;
  tan = Math.tan;
  cos = Math.cos;
  asin = Math.asin;
  acos = Math.acos;
  atan = Math.atan;
  atan2 = curry$$4(function(x, y){
    return Math.atan2(x, y);
  });
  truncate = function(x){
    return ~~x;
  };
  round = Math.round;
  ceiling = Math.ceil;
  floor = Math.floor;
  isItNaN = function(x){
    return x !== x;
  };
  even = function(x){
    return x % 2 === 0;
  };
  odd = function(x){
    return x % 2 !== 0;
  };
  gcd = curry$$4(function(x, y){
    var z;
    x = Math.abs(x);
    y = Math.abs(y);
    while (y !== 0) {
      z = x % y;
      x = y;
      y = z;
    }
    return x;
  });
  lcm = curry$$4(function(x, y){
    return Math.abs(Math.floor(x / gcd(x, y) * y));
  });
  var Num = {
    max: max,
    min: min,
    negate: negate,
    abs: abs,
    signum: signum,
    quot: quot,
    rem: rem,
    div: div,
    mod: mod,
    recip: recip,
    pi: pi,
    tau: tau,
    exp: exp,
    sqrt: sqrt,
    ln: ln,
    pow: pow,
    sin: sin,
    tan: tan,
    cos: cos,
    acos: acos,
    asin: asin,
    atan: atan,
    atan2: atan2,
    truncate: truncate,
    round: round,
    ceiling: ceiling,
    floor: floor,
    isItNaN: isItNaN,
    even: even,
    odd: odd,
    gcd: gcd,
    lcm: lcm
  };
  function curry$$4(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }

  // Generated by LiveScript 1.6.0
  var Func$1, List$1, Obj$1, Str$1, Num$1, id, isType, replicate, prelude, toString$$2 = {}.toString;
  Func$1 = Func;
  List$1 = List;
  Obj$1 = Obj;
  Str$1 = Str;
  Num$1 = Num;
  id = function(x){
    return x;
  };
  isType = curry$$5(function(type, x){
    return toString$$2.call(x).slice(8, -1) === type;
  });
  replicate = curry$$5(function(n, x){
    var i$, results$ = [];
    for (i$ = 0; i$ < n; ++i$) {
      results$.push(x);
    }
    return results$;
  });
  Str$1.empty = List$1.empty;
  Str$1.slice = List$1.slice;
  Str$1.take = List$1.take;
  Str$1.drop = List$1.drop;
  Str$1.splitAt = List$1.splitAt;
  Str$1.takeWhile = List$1.takeWhile;
  Str$1.dropWhile = List$1.dropWhile;
  Str$1.span = List$1.span;
  Str$1.breakStr = List$1.breakList;
  prelude = {
    Func: Func$1,
    List: List$1,
    Obj: Obj$1,
    Str: Str$1,
    Num: Num$1,
    id: id,
    isType: isType,
    replicate: replicate
  };
  prelude.each = List$1.each;
  prelude.map = List$1.map;
  prelude.filter = List$1.filter;
  prelude.compact = List$1.compact;
  prelude.reject = List$1.reject;
  prelude.partition = List$1.partition;
  prelude.find = List$1.find;
  prelude.head = List$1.head;
  prelude.first = List$1.first;
  prelude.tail = List$1.tail;
  prelude.last = List$1.last;
  prelude.initial = List$1.initial;
  prelude.empty = List$1.empty;
  prelude.reverse = List$1.reverse;
  prelude.difference = List$1.difference;
  prelude.intersection = List$1.intersection;
  prelude.union = List$1.union;
  prelude.countBy = List$1.countBy;
  prelude.groupBy = List$1.groupBy;
  prelude.fold = List$1.fold;
  prelude.foldl = List$1.foldl;
  prelude.fold1 = List$1.fold1;
  prelude.foldl1 = List$1.foldl1;
  prelude.foldr = List$1.foldr;
  prelude.foldr1 = List$1.foldr1;
  prelude.unfoldr = List$1.unfoldr;
  prelude.andList = List$1.andList;
  prelude.orList = List$1.orList;
  prelude.any = List$1.any;
  prelude.all = List$1.all;
  prelude.unique = List$1.unique;
  prelude.uniqueBy = List$1.uniqueBy;
  prelude.sort = List$1.sort;
  prelude.sortWith = List$1.sortWith;
  prelude.sortBy = List$1.sortBy;
  prelude.sum = List$1.sum;
  prelude.product = List$1.product;
  prelude.mean = List$1.mean;
  prelude.average = List$1.average;
  prelude.concat = List$1.concat;
  prelude.concatMap = List$1.concatMap;
  prelude.flatten = List$1.flatten;
  prelude.maximum = List$1.maximum;
  prelude.minimum = List$1.minimum;
  prelude.maximumBy = List$1.maximumBy;
  prelude.minimumBy = List$1.minimumBy;
  prelude.scan = List$1.scan;
  prelude.scanl = List$1.scanl;
  prelude.scan1 = List$1.scan1;
  prelude.scanl1 = List$1.scanl1;
  prelude.scanr = List$1.scanr;
  prelude.scanr1 = List$1.scanr1;
  prelude.slice = List$1.slice;
  prelude.take = List$1.take;
  prelude.drop = List$1.drop;
  prelude.splitAt = List$1.splitAt;
  prelude.takeWhile = List$1.takeWhile;
  prelude.dropWhile = List$1.dropWhile;
  prelude.span = List$1.span;
  prelude.breakList = List$1.breakList;
  prelude.zip = List$1.zip;
  prelude.zipWith = List$1.zipWith;
  prelude.zipAll = List$1.zipAll;
  prelude.zipAllWith = List$1.zipAllWith;
  prelude.at = List$1.at;
  prelude.elemIndex = List$1.elemIndex;
  prelude.elemIndices = List$1.elemIndices;
  prelude.findIndex = List$1.findIndex;
  prelude.findIndices = List$1.findIndices;
  prelude.apply = Func$1.apply;
  prelude.curry = Func$1.curry;
  prelude.flip = Func$1.flip;
  prelude.fix = Func$1.fix;
  prelude.over = Func$1.over;
  prelude.split = Str$1.split;
  prelude.join = Str$1.join;
  prelude.lines = Str$1.lines;
  prelude.unlines = Str$1.unlines;
  prelude.words = Str$1.words;
  prelude.unwords = Str$1.unwords;
  prelude.chars = Str$1.chars;
  prelude.unchars = Str$1.unchars;
  prelude.repeat = Str$1.repeat;
  prelude.capitalize = Str$1.capitalize;
  prelude.camelize = Str$1.camelize;
  prelude.dasherize = Str$1.dasherize;
  prelude.values = Obj$1.values;
  prelude.keys = Obj$1.keys;
  prelude.pairsToObj = Obj$1.pairsToObj;
  prelude.objToPairs = Obj$1.objToPairs;
  prelude.listsToObj = Obj$1.listsToObj;
  prelude.objToLists = Obj$1.objToLists;
  prelude.max = Num$1.max;
  prelude.min = Num$1.min;
  prelude.negate = Num$1.negate;
  prelude.abs = Num$1.abs;
  prelude.signum = Num$1.signum;
  prelude.quot = Num$1.quot;
  prelude.rem = Num$1.rem;
  prelude.div = Num$1.div;
  prelude.mod = Num$1.mod;
  prelude.recip = Num$1.recip;
  prelude.pi = Num$1.pi;
  prelude.tau = Num$1.tau;
  prelude.exp = Num$1.exp;
  prelude.sqrt = Num$1.sqrt;
  prelude.ln = Num$1.ln;
  prelude.pow = Num$1.pow;
  prelude.sin = Num$1.sin;
  prelude.tan = Num$1.tan;
  prelude.cos = Num$1.cos;
  prelude.acos = Num$1.acos;
  prelude.asin = Num$1.asin;
  prelude.atan = Num$1.atan;
  prelude.atan2 = Num$1.atan2;
  prelude.truncate = Num$1.truncate;
  prelude.round = Num$1.round;
  prelude.ceiling = Num$1.ceiling;
  prelude.floor = Num$1.floor;
  prelude.isItNaN = Num$1.isItNaN;
  prelude.even = Num$1.even;
  prelude.odd = Num$1.odd;
  prelude.gcd = Num$1.gcd;
  prelude.lcm = Num$1.lcm;
  prelude.VERSION = '1.2.1';
  var lib = prelude;
  function curry$$5(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }

  // Generated by LiveScript 1.6.0
  var abs$1, round2;
  abs$1 = lib.abs;
  round2 = function(val){
    return parseInt(val * 100 + 0.5) / 100;
  };
  new Ractive({
    template: '#template',
    target: 'body',
    data: {
      innerRadius: 1.64,
      Mt: 2,
      kFactor: 0.38,
      bendAngle: 90,
      round2: round2,
      getKFactor: function(flangeDiff){
        var ossb, ba, arc, r, Mt, kFactor;
        ossb = this.get('ossb');
        ba = 2 * (ossb - flangeDiff);
        arc = this.get('bendAngle') / 360.0;
        r = this.get('innerRadius');
        Mt = this.get('Mt');
        kFactor = (ba / (2.0 * Math.PI * arc) - r) / Mt;
        return round2(kFactor);
      }
    },
    computed: {
      bendAllowance: function(){
        var arc, r, Mt, kFactor, ba;
        arc = this.get('bendAngle') / 360.0;
        r = this.get('innerRadius');
        Mt = this.get('Mt');
        kFactor = this.get('kFactor');
        ba = 2.0 * Math.PI * (r + Mt * kFactor) * arc;
        return round2(ba);
      },
      ossb: function(){
        var r, Mt;
        r = this.get('innerRadius');
        Mt = this.get('Mt');
        return round2(r + Mt);
      },
      flangeDiff: function(){
        return round2(this.get('ossb') - this.get('bendAllowance') / 2);
      }
    }
  });

}());
